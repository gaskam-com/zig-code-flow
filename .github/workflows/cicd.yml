name: Publish Extension

on:
  pull_request:
    types: [closed]
    branches:
      - master
  release:
    types: [published]

permissions:
  contents: write
  pull-requests: write

jobs:
  initialize:
    if: github.event.pull_request.merged == true || github.event_name == 'release'
    runs-on: ubuntu-latest
    outputs:
      INIT_DONE: ${{ steps.mark_init.outputs.INIT_DONE }}

    steps:
      # Install jq for JSON parsing and manipulation
      - name: Install jq
        run: sudo apt-get install -y jq
      
      # Fetch the latest code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Configure Git identity for automated commits
      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Set up Node.js environment for VSCode extension development
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Ensure package.json is valid and well-formed
      - name: Validate package.json
        run: jq . package.json > /dev/null

      # Install project dependencies from package.json
      - name: Install dependencies
        run: npm install

      # Mark initialization as done
      - name: Mark initialization as done
        id: mark_init
        run: echo "INIT_DONE=true" >> $GITHUB_OUTPUT

  pull-request:
    needs: [initialize]
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      RELEASE_DONE: ${{ steps.mark_release.outputs.RELEASE_DONE }}
      NEW_VERSION: ${{ steps.bump_version.outputs.NEW_VERSION }}

    steps:
      - uses: actions/checkout@v4

      # Get current version
      - name: Get current version
        id: current_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      # Extract version from PR title/body: [major], [minor], or patch by default
      - name: Determine version increment
        id: version_increment
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          INCREMENT="patch"
          if echo "$PR_TITLE" "$PR_BODY" | grep -qi '\[major\]'; then
            INCREMENT="major"
          elif echo "$PR_TITLE" "$PR_BODY" | grep -qi '\[minor\]'; then
            INCREMENT="minor"
          fi
          echo "INCREMENT=$INCREMENT" >> $GITHUB_ENV

      # Increment version using npm version command and capture new version
      - name: Bump version
        id: bump_version
        run: |
          if ! npm version $INCREMENT; then
            echo "::error::Failed to bump version"
            exit 1
          fi
          NEW_VERSION=$(jq -r .version package.json)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Create a new release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Mark release work as done
      - name: Mark release work as done
        id: mark_release
        run: |
          echo "RELEASE_DONE=true" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=${{ env.NEW_VERSION }}" >> $GITHUB_OUTPUT

  release:
    needs: [initialize]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION_DONE: ${{ steps.mark_version.outputs.RELEASE_VERSION_DONE }}
      RELEASE_VERSION: ${{ steps.get_version.outputs.RELEASE_VERSION }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Get release version
        id: get_version
        run: |
          VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Mark release version work as done
        id: mark_version
        run: echo "RELEASE_VERSION_DONE=true" >> $GITHUB_OUTPUT

  push:
    needs: [pull-request, release]
    if: needs.pull-request.outputs.RELEASE_DONE == 'true' || needs.release.outputs.RELEASE_VERSION_DONE == 'true'
    runs-on: ubuntu-latest
    outputs:
      MASTER_PUSH_DONE: ${{ steps.mark_push.outputs.MASTER_PUSH_DONE }}

    steps:
      - uses: actions/checkout@v4
      
      # Ensure version follows semantic versioning (MAJOR.MINOR.PATCH)
      - name: Validate version format
        run: |
          VERSION="${{ needs.pull-request.outputs.NEW_VERSION || needs.release.outputs.RELEASE_VERSION }}"
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "::error::Invalid version format: $VERSION"
            exit 1
          fi

      # Update package.json with new version and handle potential errors
      - name: Update version
        run: |
          VERSION="${{ needs.pull-request.outputs.NEW_VERSION || needs.release.outputs.RELEASE_VERSION }}"
          if ! jq ".version = \"$VERSION\"" package.json > tmp.json; then
            echo "::error::Failed to update package.json"
            exit 1
          fi
          mv tmp.json package.json
          npm install

      # Commit version changes to master
      - name: Commit version changes
        run: |
          git add package.json
          git commit -a -m "Bump version to v$VERSION"

      # Push new version to master
      - name: Push version changes
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Mark master push as done
        id: mark_push
        run: echo "MASTER_PUSH_DONE=true" >> $GITHUB_OUTPUT

  publish:
    needs: [push]
    if: needs.push.outputs.MASTER_PUSH_DONE == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install dependencies
        run: npm install

      # Ensure VS Marketplace authentication token is available
      - name: Verify marketplace token
        run: |
          if [ -z "${{ secrets.VS_MARKETPLACE_TOKEN }}" ]; then
            echo "::error::Marketplace token missing. Add VS_MARKETPLACE_TOKEN in repository secrets."
            exit 1
          fi

      # Publish extension to VS Code Marketplace using provided token
      - name: Publish to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v1.6.2
        with:
          pat: ${{ secrets.VS_MARKETPLACE_TOKEN }}
          registryUrl: https://marketplace.visualstudio.com
